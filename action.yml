name: "Build Go Application"
description: "Builds the application written in Go and uploads artifact with the binary and additional files"

inputs:
  version:
    required: true
    description: "Version (and git ref) of the application to build"
  ref:
    required: false
    description: "Git ref to checkout before building the application, if not provided, the version input is used as ref"

  go-version:
    required: false
    description: "Version of Go which should be used to perform the checks. Takes precedence over go-version-file."

  go-version-file:
    required: false
    default: 'go.mod'
    description: "Accepts a path to a go.mod file or a go.work file that contains the version of Go. Default: 'go.mod'"

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || inputs.version }}
        fetch-depth: 0
    - name: Resolve ref type
      # Resolves the git reference value and type of it (tag, branch, sha)
      id: git-ref
      shell: bash
      run: |
        value="${{ inputs.ref || inputs.version }}"
        echo "value=$value" > $GITHUB_OUTPUT

        type=$(git cat-file -t "$value")
        if [[ "$type" == "tag" ]]; then
          echo "type=tag" >> $GITHUB_OUTPUT
        elif [[ "$type" == "commit" && "$(git branch --show-current)" == "$value" ]]; then
          echo "type=branch" >> $GITHUB_OUTPUT
        else
          echo "type=sha" >> $GITHUB_OUTPUT
        fi

        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "::group::Outputs"
        cat $GITHUB_OUTPUT
        echo "::endgroup::"
    - run: git fetch --force --tags
      shell: bash
    - name: 'Default CGO_ENABLED = 0'
      if: env.CGO_ENABLED == ''
      shell: bash
      run: echo "CGO_ENABLED=0" >> $GITHUB_ENV
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        go-version-file: ${{inputs.go-version-file}}
    - name: Install cross-compiler for linux/arm64
      if: env.CGO_ENABLED == '1'
      shell: bash
      run: sudo apt-get update && sudo apt-get -y install gcc-aarch64-linux-gnu

    - name: Set environment for cross-compilation
      shell: bash
      run: |
        if [[ "${{ env.TARGET_OS }}" == "linux" ]]; then
          echo "CC_linux_arm64=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_linux_amd64=gcc" >> $GITHUB_ENV
        elif [[ "${{ env.TARGET_OS }}" == "darwin" ]]; then
          echo "CC_darwin_arm64=gcc" >> $GITHUB_ENV
          echo "CC_darwin_amd64=gcc" >> $GITHUB_ENV
        fi

    - name: Build Go binary for multiple architectures
      shell: bash
      run: |
        for GOARCH in amd64 arm64; do
          mkdir -p dist/$GOARCH
          if [[ "${{ env.TARGET_OS }}" == "linux" ]]; then
            CC="aarch64-linux-gnu-gcc"
            [[ "$GOARCH" == "amd64" ]] && CC="gcc"
          elif [[ "${{ env.TARGET_OS }}" == "darwin" ]]; then
            CC="gcc"  # Set appropriate compiler for darwin if needed
          fi
          GOOS=${{ env.TARGET_OS }} GOARCH=$GOARCH CC=$CC go build -o dist/$GOARCH/cmd ./cmd
        done
    - name: List directory
      shell: bash
      run: |
        echo "Listing directory:"
        ls -R
        
    - name: Add README and LICENSE to each build directory (if they exist)
      shell: bash
      run: |
        set -x  # Enable verbose logging
        for GOARCH in amd64 arm64; do
          if [[ -f README.md ]]; then
            cp README.md dist/$GOARCH/
          fi
          if [[ -f LICENSE ]]; then
            cp LICENSE dist/$GOARCH/
          fi
        done

    - name: List build output for verification
      shell: bash
      run: |
        echo "Listing contents of dist/amd64:"
        ls -R dist/amd64

        echo "Listing contents of dist/arm64:"
        ls -R dist/arm64

    - name: Create tarballs for each architecture
      shell: bash
      run: |
        cd dist
        for GOARCH in amd64 arm64; do
          if [[ "$GOARCH" == "amd64" ]]; then
            tar -czvf ghaction-polygon-${{ inputs.version }}-x86_64.tar.gz -C $GOARCH -- *
          else
            tar -czvf ghaction-polygon-${{ inputs.version }}-${GOARCH}.tar.gz -C $GOARCH -- *
          fi
        done


    - name: Generate checksums for both tarballs
      shell: bash
      run: |
        cd dist
        shasum -a 256 ghaction-polygon-${{ inputs.version }}-x86_64.tar.gz > checksums.txt
        shasum -a 256 ghaction-polygon-${{ inputs.version }}-arm64.tar.gz >> checksums.txt

    - name: List directory
      shell: bash
      run: |
        echo "Listing directory:"
        ls -R

    - name: Zip the tarballs and checksum file
      shell: bash
      run: |
        cd dist
        zip ghaction-polygon-${{ inputs.version }}.zip ghaction-polygon-*.tar.gz checksums.txt

    - name: Upload the zip file to the release
      shell: bash
      run: |
        gh release upload "${{ inputs.version }}" dist/ghaction-polygon-${{ inputs.version }}.zip --clobber

    - name: Verify GitHub release
      shell: bash
      run: |
        gh release view "${{ inputs.version }}"
