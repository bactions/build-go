name: "Build Go Application"
description: "Builds the application written in Go and uploads artifact with the binary and additional files"

inputs:
  version:
    required: true
    description: "Version (and git ref) of the application to build"
  ref:
    required: false
    description: "Git ref to checkout before building the application, if not provided, the version input is used as ref"

  go-version:
    required: false
    description: "Version of Go which should be used to perform the checks. Takes precedence over go-version-file."

  go-version-file:
    required: false
    default: 'go.mod'
    description: "Accepts a path to a go.mod file or a go.work file that contains the version of Go. Default: 'go.mod'"

  artifacts-suffix:
    required: false
    default: ''
    description: "Suffix to append to the artifact name to prevent collisions if this action is used multiple times in the same workflow"

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref || inputs.version }}
        fetch-depth: 0
    - name: Resolve ref type
      # Resolves the git reference value and type of it (tag, branch, sha)
      id: git-ref
      shell: bash
      run: |
        value="${{ inputs.ref || inputs.version }}"
        echo "value=$value" > $GITHUB_OUTPUT

        type=$(git cat-file -t "$value")
        if [[ "$type" == "tag" ]]; then
          echo "type=tag" >> $GITHUB_OUTPUT
        elif [[ "$type" == "commit" && "$(git branch --show-current)" == "$value" ]]; then
          echo "type=branch" >> $GITHUB_OUTPUT
        else
          echo "type=sha" >> $GITHUB_OUTPUT
        fi

        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "::group::Outputs"
        cat $GITHUB_OUTPUT
        echo "::endgroup::"
    - run: git fetch --force --tags
      shell: bash
    - name: 'Default CGO_ENABLED = 0'
      if: env.CGO_ENABLED == ''
      shell: bash
      run: echo "CGO_ENABLED=0" >> $GITHUB_ENV
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        go-version-file: ${{inputs.go-version-file}}
    - name: Install cross-compiler for linux/arm64
      if: env.CGO_ENABLED == '1'
      shell: bash
      run: sudo apt-get update && sudo apt-get -y install gcc-aarch64-linux-gnu
    - name: 'Set target os'
      shell: bash
      run: echo "TARGET_OS=$(go env GOOS)" >> $GITHUB_ENV
    - name: 'Prepare goreleaser configuration'
      shell: bash
      run: 'envsubst < ${{ github.action_path }}/.goreleaser.template.yml > ${{ github.action_path }}/.goreleaser.yml'
      env:
        PROJECT_NAME: ${{ github.event.repository.name }}
    - uses: goreleaser/goreleaser-action@v6
      with:
        version: latest
        args: -f ${{ github.action_path }}/.goreleaser.yml release ${{ steps.git-ref.refType != 'tag' && '' || '--snapshot' }} --clean --verbose
      env:
        GITHUB_TOKEN: ${{ github.token }}
        PROJECT_NAME: ${{ github.event.repository.name }}
        VERSION: ${{ inputs.version }}
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: bin-${{ env.TARGET_OS }}${{ inputs.artifacts-suffix != '' && '-' || '' }}${{ inputs.artifacts-suffix }}
        path: |
          dist/*.tar.gz
          dist/*_checksums.txt
          
